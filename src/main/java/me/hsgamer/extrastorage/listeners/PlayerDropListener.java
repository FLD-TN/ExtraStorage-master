package me.hsgamer.extrastorage.listeners;

import me.hsgamer.extrastorage.Debug;
import me.hsgamer.extrastorage.ExtraStorage;
import me.hsgamer.extrastorage.api.storage.Storage;
import me.hsgamer.extrastorage.api.user.User;
import me.hsgamer.extrastorage.data.Constants;
import org.bukkit.entity.Item;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.inventory.ItemStack;

public class PlayerDropListener implements Listener {
    private final ExtraStorage instance;

    public PlayerDropListener(ExtraStorage instance) {
        this.instance = instance;
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        Player player = event.getPlayer();
        Item droppedItem = event.getItemDrop();

        // Ki·ªÉm tra metadata ƒë·ªÉ tr√°nh x·ª≠ l√Ω l·∫°i
        if (droppedItem.hasMetadata("processed_by_storage")) {
            return;
        }

        // B·ªè qua n·∫øu t√≠nh nƒÉng b·ªã t·∫Øt ho·∫∑c th·∫ø gi·ªõi b·ªã c·∫•m
        if (!instance.getSetting().isPickupToStorage()
                || instance.getSetting().getBlacklistWorlds().contains(player.getWorld().getName())) {
            return;
        }

        User user = instance.getUserManager().getUser(player);
        if (user == null || !user.hasPermission(Constants.STORAGE_PICKUP_PERMISSION) || !user.getStorage().getStatus()
                || user.getStorage().isMaxSpace()) {
            return;
        }

        Storage storage = user.getStorage();
        ItemStack itemStack = droppedItem.getItemStack();

        // B·ªè qua n·∫øu kho kh√¥ng th·ªÉ ch·ª©a lo·∫°i v·∫≠t ph·∫©m n√†y
        if (!storage.canStore(itemStack)) {
            return;
        }

        // üî¥ X√ìA ƒêI·ªÄU KI·ªÜN KI·ªÇM TRA INVENTORY ·ªû ƒê√ÇY üî¥
        // CH·ªà ki·ªÉm tra global filter v√† item filter

        if (!ExtraStorage.isFilterEnabled()) {
            // N·∫øu global filter t·∫Øt, LU√îN nh·∫∑t v√†o kho
            Debug.log("[DropListener] Global filter disabled - always pickup to storage");
        } else {
            // N·∫øu global filter b·∫≠t, ki·ªÉm tra item c√≥ trong filter kh√¥ng
            String itemKey = itemStack.getType().name();
            if (!storage.getFilteredItems().containsKey(itemKey)) {
                return; // Item kh√¥ng c√≥ trong filter, b·ªè qua
            }
            Debug.log("[DropListener] Item is filtered - pickup to storage: " + itemKey);
        }

        int amount = itemStack.getAmount();
        long freeSpace = storage.getFreeSpace();
        long maxTake = (freeSpace == -1) ? amount : Math.min(amount, freeSpace);

        if (maxTake <= 0) {
            return;
        }

        // Th√™m v·∫≠t ph·∫©m v√†o kho ·∫£o
        ItemStack itemToStore = itemStack.clone();
        itemToStore.setAmount((int) maxTake);
        ListenerUtil.addToStorage(player, storage, itemToStore, (int) maxTake);

        // ƒê√°nh d·∫•u item ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        droppedItem.setMetadata("processed_by_storage", new org.bukkit.metadata.FixedMetadataValue(instance, true));

        if (maxTake >= amount) {
            droppedItem.remove();
        } else {
            itemStack.setAmount(amount - (int) maxTake);
            droppedItem.setItemStack(itemStack);
        }
    }
}